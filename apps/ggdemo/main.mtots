import sys
import gg
from media import Image
from media import Audio
from random import Random

print("isArchiveScript = %s" % [sys.isArchiveScript()])
print("__file__ = %s" % [__file__])

final rand = Random()
final WIDTH = 800
final HEIGHT = 800
final FPS = 60

final window = gg.Window("Hello", WIDTH, HEIGHT, FPS)

var tick = 0

final ballImage = Image(100, 100)
for i in range(ballImage.width):
  for j in range(ballImage.height):
    if ((i - ballImage.width // 2) ** 2) + ((j - ballImage.height // 2) ** 2) < 30 ** 2:
      ballImage.set(i, j, Color(255, 255, 255))
final ballGeometry = window.newPolygon(
  [V(-1, -1), V(1, -1), V(1, 1), V(-1, 1)],
  nil,
  window.newTexture(ballImage))


class Ball:
  var color Color
  var x Int
  var y Int
  var width Int
  var height Int
  var angle Float
  def __init__(color Color, x Int, y Int, width Int, height Int, angle Float):
    this.color = color
    this.x = x
    this.y = y
    this.width = width
    this.height = height
    this.angle = angle

  def blit():
    ballGeometry.setColor(this.color)
    ballGeometry.transform.reset()
    ballGeometry.transform.scaleX(this.width / 2)
    ballGeometry.transform.scaleY(this.height / 2)
    ballGeometry.transform.rotateZ(this.angle)
    ballGeometry.transform.translate(V(this.x, this.y))
    ballGeometry.blit()


final balls List[Ball] = []
for i in range(100):
  final color = Color(rand.int(0, 255), rand.int(0, 255), rand.int(0, 255))
  final x = rand.number() * WIDTH
  final y = rand.number() * HEIGHT
  final width = 50 + 100 * rand.number()
  final height = 50 + 100 * rand.number()
  balls.append(Ball(color, x, y, width, height, 0))

var angleY = 0
var angleZ = 0

final audio = Audio.fromSampleCount(44100)
for i in range(44100):
  audio.set(i, 0, sin(i / 44100 * 440 * TAU) * ((2 ** 15) - 1))
  audio.set(i, 1, sin(i / 44100 * 440 * TAU) * ((2 ** 15) - 1))

final chan0 = gg.PlaybackChannel.get(0)
chan0.load(audio)
chan0.setVolume(1)

var started = false

final BEAT = 60 / 120 # 120 beats per minute (allegro)
final notes = [
  V(1 * BEAT, 440),
  V(1 * BEAT, 261),
  V(1 * BEAT, 440),
  V(1 * BEAT, 261),
  V(1 * BEAT, 440),
  V(1 * BEAT, 261),
  V(1 * BEAT, 440),
  V(1 * BEAT, 261),
]

final P = (1 / 30) * 1.5 # pause between notes - 1.5 * fps
final B = 60 / 180  # 180 beats per minute
final song1 = [
  V(1 * B - P, gg.NOTE.A4),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.A4),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Fs5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Fs5),
  V(P,                  0),
  V(2 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.D5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.D5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Cs5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Cs5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.B4),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.B4),
  V(P,                  0),
  V(2 * B - P, gg.NOTE.A4),
  V(P,                  0),

  V(1 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.D5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.D5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Cs5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Cs5),
  V(P,                  0),
  V(2 * B - P, gg.NOTE.B4),
  V(P,                  0),

  V(1 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.D5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.D5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Cs5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Cs5),
  V(P,                  0),
  V(2 * B - P, gg.NOTE.B4),
  V(P,                  0),

  V(1 * B - P, gg.NOTE.A4),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.A4),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Fs5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Fs5),
  V(P,                  0),
  V(2 * B - P, gg.NOTE.E5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.D5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.D5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Cs5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.Cs5),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.B4),
  V(P,                  0),
  V(1 * B - P, gg.NOTE.B4),
  V(P,                  0),
  V(2 * B - P, gg.NOTE.A4),
  V(P,                  0),
]

@window.onUpdate
def():
  tick = tick + 1

  if tick % 1 == 0:
    # window.clear(Color(0, 0, 0, 255))

    for ball in balls:
      ball.angle = TAU * (tick / 60)

  if gg.mouseButton(0, 0):
    gg.synth(0, 0, 440, 1)

  if gg.mouseButton(0, 1):
    gg.synth(0, 0, 0, 0)

  if gg.key(gg.KEY.G, 0, false):
    gg.music(1, notes)

  if gg.key(gg.KEY.G, 1):
    gg.music(1, nil)

  if gg.key(gg.KEY.R):
    print("R pressed")
    gg.music(0, nil)
    gg.music(0, song1)

  if gg.key(gg.KEY.F, 0, false):
    if started:
      chan0.pause(false)
    else:
      chan0.start(-1)
      started = true
    # gg.synth(0, 0, 300, 1)

  if gg.key(gg.KEY.F, 1):
    # gg.synth(0, 0, 0, 0)
    # gg.setAudioVolume(0, 0)
    chan0.pause(true)

  sys.enableMallocFreeLogs(true)
  for ball in balls:
    ball.blit()

  ballGeometry.setVertexColor(0, gg.RED)
  ballGeometry.setVertexColor(1, gg.GREEN)
  ballGeometry.setVertexColor(2, gg.BLUE)
  ballGeometry.setVertexColor(3, gg.LIGHT_YELLOW)
  ballGeometry.transform.reset()
  ballGeometry.transform.scaleX(80)
  ballGeometry.transform.scaleY(80)
  ballGeometry.transform.rotateY(angleY)
  ballGeometry.transform.rotateZ(angleZ)
  ballGeometry.transform.translate(V(WIDTH / 2, HEIGHT / 2))
  ballGeometry.blit()

  angleZ = angleZ + 0.014
  angleY = angleY + 0.06

  sys.enableMallocFreeLogs(false)
