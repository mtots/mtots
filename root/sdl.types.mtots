"""
Mtots bindings for SDL2
"""
import c


final QUIT "Event type: SDL_QUIT" = 0x100

final INIT_TIMER Int = raise 0
final INIT_AUDIO Int = raise 0
final INIT_VIDEO Int = raise 0
final INIT_JOYSTICK Int = raise 0
final INIT_HAPTIC Int = raise 0
final INIT_GAMECONTROLLER Int = raise 0
final INIT_EVENTS Int = raise 0
final INIT_EVERYTHING Int = raise 0

final WINDOW_FULLSCREEN Int = raise 0
final WINDOW_FULLSCREEN_DESKTOP Int = raise 0

final WINDOWPOS_CENTERED Int = raise 0
final WINDOWPOS_UNDEFINED Int = raise 0

final BUTTON_LMASK Int = raise 0
final BUTTON_MMASK Int = raise 0
final BUTTON_RMASK Int = raise 0
final BUTTON_X1MASK Int = raise 0
final BUTTON_X2MASK Int = raise 0

final SCANCODE_UNKNOWN = 0
final SCANCODE_A = 4
final SCANCODE_B = 5
final SCANCODE_C = 6
final SCANCODE_D = 7
final SCANCODE_E = 8
final SCANCODE_F = 9
final SCANCODE_G = 10
final SCANCODE_H = 11
final SCANCODE_I = 12
final SCANCODE_J = 13
final SCANCODE_K = 14
final SCANCODE_L = 15
final SCANCODE_M = 16
final SCANCODE_N = 17
final SCANCODE_O = 18
final SCANCODE_P = 19
final SCANCODE_Q = 20
final SCANCODE_R = 21
final SCANCODE_S = 22
final SCANCODE_T = 23
final SCANCODE_U = 24
final SCANCODE_V = 25
final SCANCODE_W = 26
final SCANCODE_X = 27
final SCANCODE_Y = 28
final SCANCODE_Z = 29
final SCANCODE_1 = 30
final SCANCODE_2 = 31
final SCANCODE_3 = 32
final SCANCODE_4 = 33
final SCANCODE_5 = 34
final SCANCODE_6 = 35
final SCANCODE_7 = 36
final SCANCODE_8 = 37
final SCANCODE_9 = 38
final SCANCODE_0 = 39
final SCANCODE_RETURN = 40
final SCANCODE_ESCAPE = 41
final SCANCODE_BACKSPACE = 42
final SCANCODE_TAB = 43
final SCANCODE_SPACE = 44
final SCANCODE_MINUS = 45
final SCANCODE_EQUALS = 46
final SCANCODE_LEFTBRACKET = 47
final SCANCODE_RIGHTBRACKET = 48
final SCANCODE_BACKSLASH = 49
final SCANCODE_NONUSHASH = 50
final SCANCODE_SEMICOLON = 51
final SCANCODE_APOSTROPHE = 52
final SCANCODE_GRAVE = 53
final SCANCODE_COMMA = 54
final SCANCODE_PERIOD = 55
final SCANCODE_SLASH = 56
final SCANCODE_CAPSLOCK = 57
final SCANCODE_F1 = 58
final SCANCODE_F2 = 59
final SCANCODE_F3 = 60
final SCANCODE_F4 = 61
final SCANCODE_F5 = 62
final SCANCODE_F6 = 63
final SCANCODE_F7 = 64
final SCANCODE_F8 = 65
final SCANCODE_F9 = 66
final SCANCODE_F10 = 67
final SCANCODE_F11 = 68
final SCANCODE_F12 = 69
final SCANCODE_PRINTSCREEN = 70
final SCANCODE_SCROLLLOCK = 71
final SCANCODE_PAUSE = 72
final SCANCODE_INSERT = 73
final SCANCODE_HOME = 74
final SCANCODE_PAGEUP = 75
final SCANCODE_DELETE = 76
final SCANCODE_END = 77
final SCANCODE_PAGEDOWN = 78
final SCANCODE_RIGHT = 79
final SCANCODE_LEFT = 80
final SCANCODE_DOWN = 81
final SCANCODE_UP = 82
final SCANCODE_NUMLOCKCLEAR = 83
final SCANCODE_KP_DIVIDE = 84
final SCANCODE_KP_MULTIPLY = 85
final SCANCODE_KP_MINUS = 86
final SCANCODE_KP_PLUS = 87
final SCANCODE_KP_ENTER = 88
final SCANCODE_KP_1 = 89
final SCANCODE_KP_2 = 90
final SCANCODE_KP_3 = 91
final SCANCODE_KP_4 = 92
final SCANCODE_KP_5 = 93
final SCANCODE_KP_6 = 94
final SCANCODE_KP_7 = 95
final SCANCODE_KP_8 = 96
final SCANCODE_KP_9 = 97
final SCANCODE_KP_0 = 98
final SCANCODE_KP_PERIOD = 99
final SCANCODE_LCTRL = 224
final SCANCODE_LSHIFT = 225
final SCANCODE_LALT = 226
final SCANCODE_LGUI = 227
final SCANCODE_RCTRL = 228
final SCANCODE_RSHIFT = 229
final SCANCODE_RALT = 230
final SCANCODE_RGUI = 231

final AUDIO_S16SYS Int = raise 0
final AUDIO_F32SYS Int = raise 0


def Init(flags Int) nil:
  """
  Wraps `SDL_Init` https://wiki.libsdl.org/SDL2/SDL_Init
  """


def Quit() nil:
  """
  Wraps `SDL_Quit` https://wiki.libsdl.org/SDL2/SDL_Quit
  """


def PollEvent(event Event?) Bool:
  """
  Wraps `SDL_PollEvent` https://wiki.libsdl.org/SDL2/SDL_PollEvent

  ### SDL Docs for `SDL_PollEvent`

  Poll for currently pending events.

  If `event` is not NULL, the next event is removed from the queue and stored
  in the SDL_Event structure pointed to by `event`. The 1 returned refers to
  this event, immediately stored in the SDL Event structure -- not an event
  to follow.

  If `event` is NULL, it simply returns 1 if there is an event in the queue,
  but will not remove it from the queue.

  As this function may implicitly call SDL_PumpEvents(), you can only call
  this function in the thread that set the video mode.

  SDL_PollEvent() is the favored way of receiving system events since it can
  be done from the main loop and does not suspend the main loop while waiting
  on an event to be posted.

  The common practice is to fully process the event queue once every frame,
  usually as a first step before updating the game's state:

  ```c
  while (game_is_still_running) {
      SDL_Event event;
      while (SDL_PollEvent(&event)) {  // poll until all events are handled!
          // decide what to do with this event.
      }

      // update game state, draw the current frame
  }
  ```

  * param event the SDL_Event structure to be filled with the next event from
               the queue, or NULL
  * returns 1 if there is a pending event or 0 if there are none available.
  """


def Delay(ms Int) nil:
  """
  Wraps `SDL_Delay` https://wiki.libsdl.org/SDL2/SDL_Delay

  ### SDL Docs for `SDL_Delay`

  This function waits a specified number of milliseconds before returning. It
  waits at least the specified time, but possibly longer due to OS
  scheduling.

  * param ms the number of milliseconds to delay
  """


def GetPerformanceCounter() Int:
  """
  Wraps `SDL_GetPerformanceCounter` https://wiki.libsdl.org/SDL2/SDL_GetPerformanceCounter

  NOTE: There may be some issues here because the returned Uint64 may not
  fit in a double value.

  ### SDL Docs for `SDL_GetPerformanceCounter`

  Get the current value of the high resolution counter.

  This function is typically used for profiling.

  The counter values are only meaningful relative to each other. Differences
  between values can be converted to times by using
  SDL_GetPerformanceFrequency().

  * returns the current counter value.
  """


def GetPerformanceFrequency() Int:
  """
  Wraps `SDL_GetPerformanceFrequency` https://wiki.libsdl.org/SDL2/SDL_GetPerformanceFrequency

  NOTE: There may be some issues here because the returned Uint64 may not
  fit in a double value.

  ### SDL Docs for `SDL_GetPerformanceFrequency`

  Get the count per second of the high resolution counter.

  * returns a platform-specific count per second.
  """


def RWFromFile(file String, mode String) RWops:
  """
  Wraps `SDL_RWFromFile` https://wiki.libsdl.org/SDL2/SDL_RWFromFile
  """


def RWFromString(data String) RWops:
  """
  Wraps `SDL_RWFromConstMem` https://wiki.libsdl.org/SDL2/SDL_RWFromConstMem
  but only works with `String`s.

  The returned `RWops` will hold a reference to `data` keeping it alive.
  """


def RWFromBuffer(data Buffer) RWops:
  """
  Wraps `SDL_RWFromMem` https://wiki.libsdl.org/SDL2/SDL_RWFromMem
  but only works with `Buffer`s.

  The returned `RWops` will hold a reference to `data` keeping it alive.
  """


def RWclose(context RWops) nil:
  """
  Wraps `SDL_RWclose` https://wiki.libsdl.org/SDL2/SDL_RWclose
  """


def RWsize(context RWops) Int:
  """
  Wraps `SDL_RWsize` https://wiki.libsdl.org/SDL2/SDL_RWsize
  """


def CreateWindowAndRenderer(
    width Int,
    height Int,
    windowFlags Int,
    window Window,
    renderer Renderer) nil:
  """
  Wraps `SDL_CreateWindowAndRenderer` https://wiki.libsdl.org/SDL2/SDL_CreateWindowAndRenderer
  """


def SetWindowFullscreen(window Window, flags Int) nil:
  """
  Wraps `SDL_SetWindowFullscreen` https://wiki.libsdl.org/SDL2/SDL_SetWindowFullscreen
  """


def SetWindowOpacity(window Window, opacity Float) nil:
  """
  Wraps `SDL_SetWindowOpacity` https://wiki.libsdl.org/SDL2/SDL_SetWindowOpacity
  """


def SetWindowPosition(window Window, x Int, y Int) nil:
  """
  Wraps `SDL_SetWindowPosition` https://wiki.libsdl.org/SDL2/SDL_SetWindowPosition
  """


def SetWindowResizable(window Window, resizable Bool) nil:
  """
  Wraps `SDL_SetWindowResizable` https://wiki.libsdl.org/SDL2/SDL_SetWindowResizable
  """


def SetWindowSize(window Window, w Int, h Int) nil:
  """
  Wraps `SDL_SetWindowSize` https://wiki.libsdl.org/SDL2/SDL_SetWindowSize
  """


def SetWindowTitle(window Window, title String) nil:
  """
  Wraps `SDL_SetWindowTitle` https://wiki.libsdl.org/SDL2/SDL_SetWindowTitle
  """


def SetRenderDrawColor(renderer Renderer, r Int, g Int, b Int, a Int) nil:
  """
  Wraps `SDL_SetRenderDrawColor` https://wiki.libsdl.org/SDL2/SDL_SetRenderDrawColor
  """


def RenderClear(renderer Renderer) nil:
  """
  Wraps `SDL_RenderClear` https://wiki.libsdl.org/SDL2/SDL_RenderClear
  """


def RenderFillRect(renderer Renderer, rect Rect) nil:
  """
  Wraps `SDL_RenderFillRect` https://wiki.libsdl.org/SDL2/SDL_RenderFillRect
  """


def RenderCopy(renderer Renderer, texture Texture, srcrect Rect?, dstrect Rect?) nil:
  """
  Wraps `SDL_RenderCopy` https://wiki.libsdl.org/SDL2/SDL_RenderCopy
  """


def RenderPresent(renderer Renderer) nil:
  """
  Wraps `SDL_RenderPresent` https://wiki.libsdl.org/SDL2/SDL_RenderPresent
  """


def RenderGetViewport(renderer Renderer, rect Rect) nil:
  """
  Wraps `SDL_RenderGetViewport` https://wiki.libsdl.org/SDL2/SDL_RenderGetViewport
  """


def CreateTextureFromSurface(renderer Renderer, surface Surface) Texture:
  """
  Wraps `SDL_CreateTextureFromSurface` https://wiki.libsdl.org/SDL2/SDL_CreateTextureFromSurface
  """


def DestroyTexture(texture Texture) nil:
  """
  Wraps `SDL_DestroyTexture` https://wiki.libsdl.org/SDL2/SDL_DestroyTexture
  """


def QueryTexture(
    texture Texture,
    format U32Pointer?, access IntPointer?,
    w IntPointer?, h IntPointer?) nil:
  """
  Wraps `SDL_QueryTexture` https://wiki.libsdl.org/SDL2/SDL_QueryTexture
  """


def GetMouseState(x IntPointer?, y IntPointer?) Int:
  """
  Wraps `SDL_GetMouseState` https://wiki.libsdl.org/SDL2/SDL_GetMouseState

  ### SDL Docs for `SDL_GetMouseState`
  Retrieve the current state of the mouse.

  The current button state is returned as a button bitmask, which can be
  tested using the `SDL_BUTTON(X)` macros (where `X` is generally 1 for the
  left, 2 for middle, 3 for the right button), and `x` and `y` are set to the
  mouse cursor position relative to the focus window. You can pass NULL for
  either `x` or `y`.

  * param x the x coordinate of the mouse cursor position relative to the
           focus window
  * param y the y coordinate of the mouse cursor position relative to the
           focus window
  * returns a 32-bit button bitmask of the current button state.
  """


def GetKeyboardState(n IntPointer?) Pointer:
  """
  Wraps `SDL_GetKeyboardState` https://wiki.libsdl.org/SDL2/SDL_GetKeyboardState
  """


class Point:
  """
  Wraps `SDL_Point` https://wiki.libsdl.org/SDL2/SDL_Point
  """
  var x Int
  var y Int


class FPoint:
  """
  Wraps `SDL_FPoint` https://wiki.libsdl.org/SDL2/SDL_FPoint
  """
  var x Float
  var y Float


class Rect:
  """
  Wraps `SDL_Rect` https://wiki.libsdl.org/SDL2/SDL_Rect
  """
  var x Int
  var y Int
  var w Int
  var h Int


class FRect:
  """
  Wraps `SDL_FRect` https://wiki.libsdl.org/SDL2/SDL_FRect
  """
  var x Float
  var y Float
  var w Float
  var h Float


class Color:
  """
  Wraps `SDL_Color` https://wiki.libsdl.org/SDL2/SDL_Color
  """
  var r Int
  var g Int
  var b Int
  var a Int


class Event:
  """
  Wraps `SDL_Event` https://wiki.libsdl.org/SDL2/SDL_Event
  """

  final type Int "Indicates the type of this event"


class Surface:
  """
  Wraps `SDL_Surface` https://wiki.libsdl.org/SDL2/SDL_Surface
  """
  final w Int
  final h Int


class Texture:
  """
  Wraps `SDL_Texture` https://wiki.libsdl.org/SDL2/SDL_Texture
  """


class Window:
  """
  Wraps `SDL_Window` https://wiki.libsdl.org/SDL2/SDL_Window
  """


class Renderer:
  """
  Wraps `SDL_Renderer` https://wiki.libsdl.org/SDL2/SDL_Renderer
  """

class RWops:
  """
  Wraps `SDL_RWops` https://wiki.libsdl.org/SDL2/SDL_RWops
  """
