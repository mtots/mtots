"""
Mtots bindings for SDL2
"""
import c


final QUIT "Event type: SDL_QUIT" = 0x100

final INIT_TIMER Int = raise 0
final INIT_AUDIO Int = raise 0
final INIT_VIDEO Int = raise 0
final INIT_JOYSTICK Int = raise 0
final INIT_HAPTIC Int = raise 0
final INIT_GAMECONTROLLER Int = raise 0
final INIT_EVENTS Int = raise 0
final INIT_EVERYTHING Int = raise 0


def Init(flags Int) nil:
  """
  Wraps `SDL_Init` https://wiki.libsdl.org/SDL2/SDL_Init
  """


def Quit() nil:
  """
  Wraps `SDL_Quit` https://wiki.libsdl.org/SDL2/SDL_Quit
  """


def PollEvent(event Event?) Bool:
  """
  Wraps `SDL_PollEvent` https://wiki.libsdl.org/SDL2/SDL_PollEvent

  ### SDL Docs for `SDL_PollEvent`

  Poll for currently pending events.

  If `event` is not NULL, the next event is removed from the queue and stored
  in the SDL_Event structure pointed to by `event`. The 1 returned refers to
  this event, immediately stored in the SDL Event structure -- not an event
  to follow.

  If `event` is NULL, it simply returns 1 if there is an event in the queue,
  but will not remove it from the queue.

  As this function may implicitly call SDL_PumpEvents(), you can only call
  this function in the thread that set the video mode.

  SDL_PollEvent() is the favored way of receiving system events since it can
  be done from the main loop and does not suspend the main loop while waiting
  on an event to be posted.

  The common practice is to fully process the event queue once every frame,
  usually as a first step before updating the game's state:

  ```c
  while (game_is_still_running) {
      SDL_Event event;
      while (SDL_PollEvent(&event)) {  // poll until all events are handled!
          // decide what to do with this event.
      }

      // update game state, draw the current frame
  }
  ```

  * param event the SDL_Event structure to be filled with the next event from
               the queue, or NULL
  * returns 1 if there is a pending event or 0 if there are none available.
  """


def Delay(ms Int) nil:
  """
  Wraps `SDL_Delay` https://wiki.libsdl.org/SDL2/SDL_Delay

  ### SDL Docs for `SDL_Delay`

  This function waits a specified number of milliseconds before returning. It
  waits at least the specified time, but possibly longer due to OS
  scheduling.

  * param ms the number of milliseconds to delay
  """


def GetPerformanceCounter() Int:
  """
  Wraps `SDL_GetPerformanceCounter` https://wiki.libsdl.org/SDL2/SDL_GetPerformanceCounter

  NOTE: There may be some issues here because the returned Uint64 may not
  fit in a double value.

  ### SDL Docs for `SDL_GetPerformanceCounter`

  Get the current value of the high resolution counter.

  This function is typically used for profiling.

  The counter values are only meaningful relative to each other. Differences
  between values can be converted to times by using
  SDL_GetPerformanceFrequency().

  * returns the current counter value.
  """


def GetPerformanceFrequency() Int:
  """
  Wraps `SDL_GetPerformanceFrequency` https://wiki.libsdl.org/SDL2/SDL_GetPerformanceFrequency

  NOTE: There may be some issues here because the returned Uint64 may not
  fit in a double value.

  ### SDL Docs for `SDL_GetPerformanceFrequency`

  Get the count per second of the high resolution counter.

  * returns a platform-specific count per second.
  """


def RWFromFile(file String, mode String) RWops:
  """
  Wraps `SDL_RWFromFile` https://wiki.libsdl.org/SDL2/SDL_RWFromFile
  """


def RWFromString(data String) RWops:
  """
  Wraps `SDL_RWFromConstMem` https://wiki.libsdl.org/SDL2/SDL_RWFromConstMem
  but only works with `String`s.

  The returned `RWops` will hold a reference to `data` keeping it alive.
  """


def RWFromBuffer(data Buffer) RWops:
  """
  Wraps `SDL_RWFromMem` https://wiki.libsdl.org/SDL2/SDL_RWFromMem
  but only works with `Buffer`s.

  The returned `RWops` will hold a reference to `data` keeping it alive.
  """


def RWclose(context RWops) nil:
  """
  Wraps `SDL_RWclose` https://wiki.libsdl.org/SDL2/SDL_RWclose
  """


def RWsize(context RWops) Int:
  """
  Wraps `SDL_RWsize` https://wiki.libsdl.org/SDL2/SDL_RWsize
  """


def CreateWindowAndRenderer(
    width Int,
    height Int,
    windowFlags Int,
    window Window,
    renderer Renderer) nil:
  """
  Wraps `SDL_CreateWindowAndRenderer` https://wiki.libsdl.org/SDL2/SDL_CreateWindowAndRenderer
  """


def SetRenderDrawColor(renderer Renderer, r Int, g Int, b Int, a Int) nil:
  """
  Wraps `SDL_SetRenderDrawColor` https://wiki.libsdl.org/SDL2/SDL_SetRenderDrawColor
  """


def RenderClear(renderer Renderer) nil:
  """
  Wraps `SDL_RenderClear` https://wiki.libsdl.org/SDL2/SDL_RenderClear
  """


def RenderFillRect(renderer Renderer, rect Rect) nil:
  """
  Wraps `SDL_RenderFillRect` https://wiki.libsdl.org/SDL2/SDL_RenderFillRect
  """


def RenderCopy(renderer Renderer, texture Texture, srcrect Rect?, dstrect Rect?) nil:
  """
  Wraps `SDL_RenderCopy` https://wiki.libsdl.org/SDL2/SDL_RenderCopy
  """


def RenderPresent(renderer Renderer) nil:
  """
  Wraps `SDL_RenderPresent` https://wiki.libsdl.org/SDL2/SDL_RenderPresent
  """


def RenderGetViewport(renderer Renderer, rect Rect) nil:
  """
  Wraps `SDL_RenderGetViewport` https://wiki.libsdl.org/SDL2/SDL_RenderGetViewport
  """


def CreateTextureFromSurface(renderer Renderer, surface Surface) Texture:
  """
  Wraps `SDL_CreateTextureFromSurface` https://wiki.libsdl.org/SDL2/SDL_CreateTextureFromSurface
  """


def DestroyTexture(texture Texture) nil:
  """
  Wraps `SDL_DestroyTexture` https://wiki.libsdl.org/SDL2/SDL_DestroyTexture
  """


def QueryTexture(
    texture Texture,
    format c.U32Cell?, access c.IntCell?,
    w c.IntCell?, h c.IntCell?) nil:
  """
  Wraps `SDL_QueryTexture` https://wiki.libsdl.org/SDL2/SDL_QueryTexture
  """


def GetMouseState(x c.IntCell?, y c.IntCell) Int:
  """
  Wraps `SDL_GetMouseState` https://wiki.libsdl.org/SDL2/SDL_GetMouseState

  ### SDL Docs for `SDL_GetMouseState`
  Retrieve the current state of the mouse.

  The current button state is returned as a button bitmask, which can be
  tested using the `SDL_BUTTON(X)` macros (where `X` is generally 1 for the
  left, 2 for middle, 3 for the right button), and `x` and `y` are set to the
  mouse cursor position relative to the focus window. You can pass NULL for
  either `x` or `y`.

  * param x the x coordinate of the mouse cursor position relative to the
           focus window
  * param y the y coordinate of the mouse cursor position relative to the
           focus window
  * returns a 32-bit button bitmask of the current button state.
  """


class Point:
  """
  Wraps `SDL_Point` https://wiki.libsdl.org/SDL2/SDL_Point
  """
  var x Int
  var y Int


class FPoint:
  """
  Wraps `SDL_FPoint` https://wiki.libsdl.org/SDL2/SDL_FPoint
  """
  var x Float
  var y Float


class Rect:
  """
  Wraps `SDL_Rect` https://wiki.libsdl.org/SDL2/SDL_Rect
  """
  var x Int
  var y Int
  var w Int
  var h Int


class FRect:
  """
  Wraps `SDL_FRect` https://wiki.libsdl.org/SDL2/SDL_FRect
  """
  var x Float
  var y Float
  var w Float
  var h Float


class Color:
  """
  Wraps `SDL_Color` https://wiki.libsdl.org/SDL2/SDL_Color
  """
  var r Int
  var g Int
  var b Int
  var a Int


class Event:
  """
  Wraps `SDL_Event` https://wiki.libsdl.org/SDL2/SDL_Event
  """

  final type Int "Indicates the type of this event"


class Surface:
  """
  Wraps `SDL_Surface` https://wiki.libsdl.org/SDL2/SDL_Surface
  """
  final w Int
  final h Int


class Texture:
  """
  Wraps `SDL_Texture` https://wiki.libsdl.org/SDL2/SDL_Texture
  """


class Window:
  """
  Wraps `SDL_Window` https://wiki.libsdl.org/SDL2/SDL_Window
  """


class Renderer:
  """
  Wraps `SDL_Renderer` https://wiki.libsdl.org/SDL2/SDL_Renderer
  """

class RWops:
  """
  Wraps `SDL_RWops` https://wiki.libsdl.org/SDL2/SDL_RWops
  """
