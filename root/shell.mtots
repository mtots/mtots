"""
Convenient utility for running shell commands

The IO facilities are simplified, and each Job provides their
output to a `Buffer`.

For a streaming version, see the `shell.concurrent` module
where pipes and file descriptors are used instead.
"""
import subprocess
import fs


class Pipeline:
  "A pipeline of jobs"
  final jobs List[Job]

  def __init__(jobs List[Job]):
    this.jobs = jobs

  def __or__(job Job) Pipeline:
    this.jobs.append(job)
    return this

  def run() nil:
    var input = Buffer()
    var output = Buffer()

    for job in this.jobs:
      job.exe(input, output)
      final tmp = input
      input = output
      output = tmp


class Job:
  """
  """
  def __init__():
    ""

  def exe(input Buffer, output Buffer) nil:
    """
    Abstract.

    Parameters:
    * input - Buffer containing input data. Because the input data may
      be used for other Jobs, the input Buffer should not be mutated.
    * output - Buffer to write/append output data to.
    """
    raise "NotImplemented Job.exe()"

  def run() nil:
    return this.exe(Buffer(), Buffer())

  def __or__(other Job) Pipeline:
    return Pipeline([this, other])


class ReadString(Job):
  final contents String

  def __init__(contents String):
    this.contents = contents

  def exe(input Buffer, output Buffer) nil:
    output.addString(this.contents)


class ReadFile(Job):
  final path String

  def __init__(path String):
    this.path = path

  def exe(input Buffer, output Buffer) nil:
    fs.readIntoBuffer(this.path, output)


class WriteFile(Job):
  final path String

  def __init__(path String):
    this.path = path

  def exe(input Buffer, output Buffer) nil:
    fs.writeBytes(this.path, input)


class Run(Job):
  """
  A job that runs a subprocess
  """
  final args List[String]

  def __init__(args List[String]):
    super.__init__()
    this.args = args

  def exe(input Buffer, output Buffer) nil:
    subprocess.run(
      this.args,    # args
      true,         # check
      nil,          # stdin
      nil,          # stdout
      nil,          # stderr
      input,        # input
      output,       # outputBuffer
    )
