"""
Utilities for starting, piping and waiting on subprocesses.
"""
import subprocess


class Job:
  """
  Base class for a shell job that can be piped
  """
  var input Job?

  def __init__():
    this.input = nil

  def _wait() nil:
    "Wait on this, without considering any of its dependencies"

  def wait() nil:
    this._wait()
    if this.input:
      this.input!.wait()


class Run(Job):
  """
  A shell job that runs a subprocess
  """

  final _args List[String]
  var popen subprocess.Popen?

  def __init__(args List[String]):
    super.__init__()
    this._args = args

  def start(pipe Bool = false) nil:
    """
    Start a run of this cli command and return a Popen object.
    To check if the process finished, call `wait` on the returned
    Popen instance or use the `run` method instead.
    """
    var inputFD Int? = nil
    if this.input:
      final input = this.input as Job
      inputFD = (input.popen as subprocess.Popen).stdoutPipe
    var stdoutFD Int? = nil
    if pipe:
      stdoutFD = subprocess.PIPE
    final popen = subprocess.Popen(this._args, inputFD, stdoutFD)
    this.popen = popen
    return popen

  def _wait() nil:
    (this.popen as subprocess.Popen).wait()

  def run() nil:
    """
    Start a run of this cli command and wait for it to finish
    """
    this.start()
    this.wait()

  def __or__(other Run) Run:
    other.input = this
    return other
