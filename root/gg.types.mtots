"""
A simple game development library
"""
from media import Image
from media import Audio
from media import Canvas

# A collection of curated colors taken from PICO-8's palette.
# 16 offical colors + 16 unofficial colors for a total of 32.
final BLACK           = Color(   0,   0,   0, 255)
final DARK_BLUE       = Color(  29,  43,  83, 255)
final DARK_PURPLE     = Color( 126,  37,  83, 255)
final DARK_GREEN      = Color(   0, 135,  81, 255)
final BROWN           = Color( 171,  82,  54, 255)
final DARK_GREY       = Color(  95,  87,  79, 255)
final LIGHT_GREY      = Color( 194, 195, 199, 255)
final WHITE           = Color( 255, 241, 232, 255)
final RED             = Color( 255,   0,  77, 255)
final ORANGE          = Color( 255, 163,   0, 255)
final YELLOW          = Color( 255, 236,  39, 255)
final GREEN           = Color(   0, 228,  54, 255)
final BLUE            = Color(  41, 173, 255, 255)
final LAVENDER        = Color( 131, 118, 156, 255)
final PINK            = Color( 255, 119, 168, 255)
final LIGHT_PEACH     = Color( 255, 204, 170, 255)
final BROWNISH_BLACK  = Color(  41,  24,  20, 255)
final DARKER_BLUE     = Color(  17,  29,  53, 255)
final DARKER_PURPLE   = Color(  66,  33,  54, 255)
final BLUE_GREEN      = Color(  18,  83,  89, 255)
final DARK_BROWN      = Color( 116,  47,  41, 255)
final DARKER_GREY     = Color(  73,  51,  59, 255)
final MEDIUM_GREY     = Color( 162, 136, 121, 255)
final LIGHT_YELLOW    = Color( 243, 239, 125, 255)
final DARK_RED        = Color( 190,  18,  80, 255)
final DARK_ORANGE     = Color( 255, 108,  36, 255)
final LIME_GREEN      = Color( 168, 231,  46, 255)
final MEDIUM_GREEN    = Color(   0, 181,  67, 255)
final TRUE_BLUE       = Color(   6,  90, 181, 255)
final MAUVE           = Color( 117,  70, 101, 255)
final DARK_PEACH      = Color( 255, 110,  89, 255)
final PEACH           = Color( 255, 157, 129, 255)


final COLORS """
  List of PICO-8 colors in order PICO-8's palette order
""" = final[
  BLACK,
  DARK_BLUE,
  DARK_PURPLE,
  DARK_GREEN,
  BROWN,
  DARK_GREY,
  LIGHT_GREY,
  WHITE,
  RED,
  ORANGE,
  YELLOW,
  GREEN,
  BLUE,
  LAVENDER,
  PINK,
  LIGHT_PEACH,
  BROWNISH_BLACK,
  DARKER_BLUE,
  DARKER_PURPLE,
  BLUE_GREEN,
  DARK_BROWN,
  DARKER_GREY,
  MEDIUM_GREY,
  LIGHT_YELLOW,
  DARK_RED,
  DARK_ORANGE,
  LIME_GREEN,
  MEDIUM_GREEN,
  TRUE_BLUE,
  MAUVE,
  DARK_PEACH,
  PEACH,
]


class Window:
  """
  A window for viewing the game.

  Currently, only one Window may be created per program.

  Once created, the Window's main loop will be queued to run
  when the __main__ module has finished.
  """

  static def defaultFPS() Int:
    """
    Gets the default frames per second.
    Always returns 30.
    """

  static def flagRESIZABLE() Int:
    """
    Flag to pass to the constructor to enable resizing
    """

  final transform Matrix """
    Transformation matrix to apply when rendering geometries.
    Used to control the camera.
  """

  def __init__(
      title String = "",
      width Int = 0,
      height Int = 0,
      framesPerSecond Int = 30,
      flags Int = 0):
    ""

  def setTitle(title String) nil:
    """
    Sets the window's title
    """

  def setBackgroundColor(color Color) nil:
    """
    Sets the window's background color.

    The screen will be cleared with this color before call to `update`
    each frame.
    """

  def clear(color Color) nil:
    """
    Clear the screen with the given color
    """

  def onUpdate(update Function[Any]) nil:
    """
    Sets the update callback.

    The update callback is called 60 times per second
    right before each frame is presented to the screen.
    """

  def onClick(callback Function[ClickEvent, Any]) nil:
    """
    Sets the callback for when a mouse button or finger is pressed down.
    """

  def onClickUp(callback Function[ClickEvent, Any]) nil:
    """
    Sets the callback for when a mouse button or finger is released.
    """

  def onKeyDown(callback Function[KeyEvent, Any]) nil:
    """
    Sets the callback for when a key on the keyboard is pressed
    """

  def onKeyUp(callback Function[KeyEvent, Any]) nil:
    """
    Sets the callback for when a key on the keyboard is released
    """

  def onMotion(callback Function[MotionEvent, Any]) nil:
    """
    Sets the callback for when the mouse cursor or a touch moves across
    the screen
    """

  def getCanvas() Canvas:
    """
    Returns the `Canvas` currently associated with this `Window` (e.g. through
    a call to `newCanvas`).

    If there is no canvas `Canvas` associated with this `Window`, a new one is
    created with dmensions matching the current window.
    """

  def newCanvas(width Int=-1, height Int=-1) Canvas:
    """
    Returns a Canvas you can modify to draw on the window.

    If `width` or `height` is negative, they will default to the window
    width and window height in pixels respectively (more specifically
    the results of `SDL_GetRendererOutputSize`).

    Any canvas previously associated with this Window will no longer
    be associated with this Window.

    This canvas image will be redrawn on the window every
    frame before the update callback.

    This approach is slower than rendering with sprites and textures
    directly, but is easier and simpler to get something on the screen.
    """

  def newTexture(image Image, streaming Bool = false) Texture:
    """
    Creates a texture from an image that can be used to
    draw on this window.

    If `streaming` is set to true, the texture will hold a
    reference to the image, and the `update` method on the
    returned `Texture` will update the texture with the new
    state of `image`.
    """

  def newPolygon(
      points List[Vector],
      colors List[Color]?=nil,
      texture Texture?=nil,
      textureCoordinates List[Vector]?=nil) Geometry:
    """
    Create a new polygon `Geometry` with the given points.

    To create more general shapes, see the `newGeometry` method.

    If the `colors` list is provided, its length must be either 1 or `len(points)`
    and will assign colors to each vertex. If `len(colors)` is 1, every vertex
    will be assigned the same color.
    If `colors` is not provided or nil, the color
    of each vertex will be assumed to be `Color(255, 255, 255)`.

    If `texture` is provided, it will be used when rendering the polygon.
    Further, `textureCorodinates` will be used to determine the texture coordinates
    for each vertex. `textureCoordinates` should also match the length of `points`
    when provided.

    If `textureCoordinates` is omitted or nil, the first 4 points will be set to
    point to the four corners of the texture starting from the upper-left corner
    going clockwise.

    Texture coordinates are normalized - so each component should be a value between
    zero and one.
    """

  def newGeometry(vertexCount Int, indexCount Int) Geometry:
    """
    Create a new `Geometry` with the given number of vertices and indices.

    This low-level interface is useful when you want to render more than a single polygon
    in a single blit and you are willing to manually modify the geometry's
    attributes.
    """


class Texture:
  """
  A Texture is an Image that has been loaded into GPU memory
  """

  final width Int
  final height Int

  def blit(pos Vector) nil:
    """
    Draws this texture at the given position
    """

  def isStreaming() Bool:
    """
    Returns true if this is a streaming texture.
    """

  def update() nil:
    """
    If this `Texture` was created with the `streaming` parameter
    set to true, this method will update the texture to the
    current state of the associated `Image`.

    Otherwise, this method raises an error.
    """


class Geometry:
  """
  One of the two primary mechanisms used for rendering graphics on the screen.
  (the other mechanism being `Canvas` - for drawing text, HUD, and other
  kind of rendering that does not require a notion of 'space')

  A Geometry is a list of vertices and indices into those vertices
  that describes a set of triangles that can be rendered.

  Each vertex can be set to a specific color to create gradient images.

  Almost everything about a geometry can be modified through its methods
  except for the number of vertices and indices it has.
  """

  final transform Matrix """
    The transformation matrix for this geometry.
    Usually initialized to the identity matrix.
  """

  def blit() nil:
    """
    Draw this `Geometry` to the associated window
    """

  def setTexture(texture Texture?) nil:
    """
    Assigns a texture to this geometry.
    A `nil` value will remove the prior texture associated with this
    geometry, if any.
    """

  def setColor(color Color) nil:
    """
    Set the color of all vertices of this Geometry to the given color
    """

  def getVertexCount() Int:
    """
    Returns the number of vertices in this geometry
    """

  def setVertexColor(i Int, color Color) nil:
    """
    Sets the color of the vertex specified by `i`.
    """

  def setVertexTextureCoordinates(i Int, coords Vector) nil:
    """
    Sets the (normalized) texture coordinates of the vertex specified by `i`.
    """

  def setVertexPosition(i Int, position Vector) nil:
    """
    Sets the position of the vertex specified by `i`.

    NOTE: the position specified is not the final position used to draw the location
    on the screen. The given position will be modified by the transform matrices of
    both the geometry and the window.
    """

  def getIndexCount() Int:
    """
    Returns the number of indices in this geometry
    """

  def setIndex(j Int, index Int) nil:
    """
    Sets the index specified by `j` to the value `index`.

    `index` should be an index into the list of vertices.
    """


class ClickEvent:
  """
  Click events fire when a mouse clicks or a finger touches a
  part of the window or screen (onClick and onClickUp).
  """

  final x Int "x coordinate, relative to the window"
  final y Int "y coordinate, relative to the window"
  final button Int """
    The button that was pressed.
    1 - left mouse button,
    2 - middle mouse button,
    3 - right mouse button
  """


class KeyEvent:
  """
  Keyboard events fire when a key is pressed down (onKeyDown) or
  up (onKeyUp)
  """

  final key String """
    Name of the key that was pressed.
    The key disregards keyboard layout and the names are based
    purely on the scancode.
  """

  final scancode Int """
    The raw scancode value that represents the key that was just pressed.
    Scancodes disregard keyboard layout and locale.

    For more information see:
    https://gist.github.com/ekaitz-zarraga/2b25b94b711684ba4e969e5a5723969b
  """

  final repeat Bool """
    True if this is keyboard event was fired as result of auto-repeat
  """


class MotionEvent:
  """
  Motion events fire when the mouse or touch moves across the window
  """

  final x Int "x coordinate relative to the window"
  final y Int "y coordinate relative to the window"
  final dx Int "relative motion in the x direction"
  final dy Int "relative motion in the y direction"


def loadAudio(audio Audio, channel Int=0) nil:
  """
  Load audio to play.

  There are 8 channels, and the audio will be loaded to the given channel
  """


def playAudio(channel Int=0, repeats Int=0) nil:
  """
  Play audio in the given channel

  `repeats` argument may be set to have the audio play an extra `repeat` times.
  Negative value will cause audio to loop I32_MAX times.
  """


def pauseAudio(channel Int=0, pause Bool=true) nil:
  """
  Pauses the audio
  """


def setAudioVolume(channel Int, volume Int) nil:
  """
  Sets the volume for a given audio channel.

  The volume must be between 0 and 128 inclusive.
  """
