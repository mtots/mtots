"""
## Subprocess management

Implements a subset of Python's subprocess module, and adds a few things not in Python's version.
(Compare with https://docs.python.org/3/library/subprocess.html)
"""

class CompletedProcess:
  final returncode Int
  final stdout String
  final stderr String


def run(
    args List[String],
    check Bool=false,
    input String?=nil,
    captureOutput Bool=false) CompletedProcess:
  """
  Spawn a subprocess and wait for it to finish.

  NOTE: the returned `CompletedProcess` is a singleton and successive calls to `run`
  will clobber fields values populated in previous calls.

  Parameters:
  * args - the only required parameter. List containing the command to run and arguments
    to pass to the subprocess.
  * check - if set to `true`, this function will throw if the subprocess returns
    a non-zero exit code.
  * input - some data to pass to stdin of the child process. Any non-nil value here
    will cause this function to PIPE the stdin of the child.
  * captureOutput - by default, when set to `false`, `run` will inherit stdout and
    stderr from the parent. However, when this parameter is set to `true`, stdout
    and stderr will be piped and stored as a `String` in the returned `CompletedProcess`'s
    `stdout` and `stderr` fields.
  """


final PIPE """
Flag used to indicate a Popen stream should be captured.
"""= -1


class Popen:
  """
  Execute a child program in a new process. On POSIX, the class uses
  os.execvpe()-like behavior to execute the child program. On Windows,
  the class uses the Windows CreateProcess() function.
  """

  final returncode Int

  final stdinPipe Int """
    The file descriptor for the write end of the stdin pipe if this Popen
    was created with stdin=PIPE. Otherwise this value should be -1.
  """

  final stdoutPipe Int """
    The file descriptor for the read end of the stdout pipe if this Popen
    was created wtih stdout=PIPE. Otherwise this value should be -1.
  """

  final stderrPipe Int """
    The file descriptor for the read end of the stderr pipe if this Popen
    was created wtih stderr=PIPE. Otherwise this value should be -1.
  """

  def __init__(
      args List[String],
      stdin Int?=nil,
      stdout Int?=nil,
      stderr Int?=nil):
    """
    Start a new subprocess.
    """

  def wait() Int:
    """
    Wait for child process to terminate. Set and return returncode attribute.

    Note: This will deadlock when using stdout=PIPE or stderr=PIPE and the
    child process generates enough output to a pipe such that it blocks
    waiting for the OS pipe buffer to accept more data. Use
    Popen.communicate() when using pipes to avoid that.
    """

  def communicate(input String?=nil, stdout Buffer?=nil, stderr Buffer?=nil) nil:
    """
    Interact with process: Read data from stdout and stderr, until end-of-file
    is reached. Wait for process to terminate and set the returncode
    attribute. Returns a pair stdout, stderr. If they were not captured/PIPEd,
    the results will be empty strings.

    Parameters:
    * input - String data to pass to stdin of this subprocess. If this parameter
      is not nil, this Popen must have been created with stdin=PIPE.
    """
