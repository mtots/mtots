"""
re-mplementation of paco - this time on top of gg rather than in raw C
"""
import gg
from media import Canvas
from media import Image
from paco2._scancode import scancode
from paco2._color import TRANSPARENT
from paco2._color import BLACK
from paco2._color import DARK_BLUE
from paco2._color import DARK_PURPLE
from paco2._color import DARK_GREEN
from paco2._color import BROWN
from paco2._color import DARK_GREY
from paco2._color import LIGHT_GREY
from paco2._color import WHITE
from paco2._color import RED
from paco2._color import ORANGE
from paco2._color import YELLOW
from paco2._color import GREEN
from paco2._color import BLUE
from paco2._color import LAVENDER
from paco2._color import PINK
from paco2._color import LIGHT_PEACH
from paco2._color import BROWNISH_BLACK
from paco2._color import DARKER_BLUE
from paco2._color import DARKER_PURPLE
from paco2._color import BLUE_GREEN
from paco2._color import DARK_BROWN
from paco2._color import DARKER_GREY
from paco2._color import MEDIUM_GREY
from paco2._color import LIGHT_YELLOW
from paco2._color import DARK_RED
from paco2._color import DARK_ORANGE
from paco2._color import LIME_GREEN
from paco2._color import MEDIUM_GREEN
from paco2._color import TRUE_BLUE
from paco2._color import MAUVE
from paco2._color import DARK_PEACH
from paco2._color import PEACH
from paco2._color import COLORS
from paco2._color import _COLORTABLE

var _window gg.Window? = nil
var _title String = ""
var _scalingFactor = 1
var _width = 128
var _height = 128
final _fps = 30
var _penColor = LIGHT_GREY
var _canvas Canvas? = nil
var _canvasTexture gg.Texture? = nil
var _onUpdate = def():nil
var _onDraw = def():nil


def _getWindow() gg.Window:
  if _window is nil:
    raise "Tried to access window before paco.init()"
  return _window


def _getCanvas() Canvas:
  if _canvas is nil:
    raise "Tried to access canvas before paco.init()"
  return _canvas


def _getCanvasTexture() gg.Texture:
  if _canvasTexture is nil:
    raise "Tried to access canvas texture before paco.init()"
  return _canvasTexture


def setWindowTitle(title String) nil:
  """
  Sets the title of the window
  """
  _title = title
  if _window:
    _getWindow().setTitle(title)


def setScalingFactor(scalingFactor Float) nil:
  """
  Sets the scaling factor (i.e. how much the rendering width and height will be
  scaled on the window).
  """
  _scalingFactor = scalingFactor


def setRenderDimensions(width Int, height Int) nil:
  """
  Sets the rendering dimensions in pixels.
  """
  _width = width
  _height = height


def init() nil:
  """
  Initializes paco and creates the window
  """
  final window = gg.Window(
    _title, _width * _scalingFactor, _height * _scalingFactor, _fps, 0)
  _window = window

  final image = Image(_width, _height)
  final canvas = Canvas(image)
  _canvas = canvas
  final canvasTexture = window.newTexture(image, true)
  _canvasTexture = canvasTexture

  @window.onUpdate
  def() nil:
    _onUpdate()
    _onDraw()
    final texture = _getCanvasTexture()
    texture.update()
    texture.blit(nil, nil)


def onUpdate(callback Function[Any]) nil:
  _onUpdate = callback


def onDraw(callback Function[Any]) nil:
  _onDraw = callback


def mainLoop(update Function[Any], draw Function[Any]?=nil):
  """
  Sets up the update and draw callbacks
  """
  _onUpdate = update
  if draw:
    _onDraw = draw


def clear(color Int) nil:
  """
  Clears the screen with the given color.
  """
  _getCanvas().fill(_COLORTABLE[color])


class SpriteSheet:
  """
  A bitmap image that holds a grid of sheets.

  When saved to a file, a sprite sheet will be a `.bmp` file with 8-bit pixel depth.
  When a sheet is saved to a file, paco will match the palette for the file with its
  own system colors.
  However, when reading a sprite sheet from a file, paco will ignore the color palette.

  Further, the sprite dimensions will be stored in the palette as color 255.
  """

  var width Int
  var height Int
  var spriteWidth Int
  var spriteHeight Int

  def __init__(width Int, height Int, spriteWidth Int, spriteHeight Int):
    this.width = width
    this.height = height
    this.spriteWidth = spriteWidth
    this.spriteHeight = spriteHeight


var _rect_var = Rect(0, 0 ,0, 0)


def rect(x0 Int, y0 Int, x1 Int, y1 Int, style Int=0, color Int=-1) nil:
  """
  Draws a rectangle to the framebuffer.

  Parameters:
  * x0 - x coordinate of the upper left corner of the rectangle,
  * y0 - y coordinate of the upper left corner of the rectangle,
  * x1 - x coordinate of the lower right corner of the rectangle,
  * y1 - y coordinate of the lower right corner of the rectangle,
  * style - specifies the way to draw the rectangle (defaults to 0, FILL).
    * 0 (FILL) - Fills the rectangle.
    * 1 (OUTLINE) - Draws just the outline of the rectangle.
  * color - The color to use when drawing the rectangle.
    If omitted or -1, color will default to the pen color.
  """
  if color == -1:
    color = _penColor

  final canvas = _getCanvas()
  _rect_var.minX = x0
  _rect_var.minY = y0
  _rect_var.width = x1 - x0
  _rect_var.height = y1 - y0
  final rgbc = _COLORTABLE[color]

  if style == 0:
    canvas.fillRect(_rect_var, rgbc)
  else:
    canvas.strokeRect(_rect_var, rgbc)


def click(mouseButtonID Int=0, query Int=0) Bool:
  """
  Queries the state of a mouse button.

  Parameters:
  * mouseButtonID - an integer between 0-2 inclusive indicating the mouse button.
    Defaults to 0.
    * 0 (LEFT) - the left mouse button
    * 1 (RIGHT) - the right mouse button
    * 2 (MIDDLE) - the middle mouse button
  * query - an integer between 0-2 inclusive indicating the kind of button
    event to query for.
    Defaults to 0.
    * 0 (PRESSED) - tests for whether the given button was just clicked
      within the past frame.
    * 1 (RELEASED) - tests whether the given button was just released within
      the past frame.
    * 2 (HELD) - test whether the button is currently being held down by
      the player.
  """
  return gg.mouseButton(mouseButtonID, query)


def key(scancode Int=-1, query Int=2) Int:
  """
  Checks the state of a key on the keyboard.

  Parameters:
  * scancode - If scancode is not -1, it will check if the key referenced by the
    scancode is currently being HELD (if query = 2), was just PRESSED (if query = 0),
    or was just RELEASED (if query = 1).

    If scancode is -1, it will return the next key that was just pressed (if
    query = 0 or query = 2), or just released (if query = 1). If no more keys
    remain, this function will return -1.

  * query - Determines the kind of query to make about a key on the keyboard.
    Defaults to 2.

    The three valid values for query are:
    * 0 (PRESSED) - to see if the key was just recently pressed,
    * 1 (RELEASED) - to see if the key was just recently released, or
    * 2 (HELD) - to see if a key is currently being held down.
  """
  if query != 2:
    raise "paco2.key() does not yet support any queries besides 'HELD' (2)"
  return gg.key(scancode)
